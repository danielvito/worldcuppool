<?php defined('SYSPATH') OR die('No direct script access.');
/**
 * Contains debugging and dumping tools.
 *
 * @package Classes
 * @author  Daniel de Vito <daniel_vito@yahoo.com.br>
 */
class Debug extends Kohana_Debug {

	/**
	 * Print debug.
	 * 
	 * @return void
	 */
	public static function x()
	{
		if (func_num_args() === 0)
			exit('Nenhum parÃ¢metro passado para o Debug::x()');
		$boolPlainText = FALSE;
		if (php_sapi_name() == 'cli' OR defined('STDIN'))
			$boolPlainText = TRUE;
		else {
			$arrHeaders = apache_response_headers();
			if (isset($arrHeaders['Content-Type']) AND ! strstr($arrHeaders['Content-Type'], 'text/html'))
				$boolPlainText = TRUE;
			if (isset($_SERVER['HTTP_CONTENT_TYPE']) AND ! strstr($_SERVER['HTTP_CONTENT_TYPE'], 'text/html'))
				$boolPlainText = TRUE;
		}
		$strProfiler = '';
		if ( ! $boolPlainText)
			$strProfiler = View::factory('profiler/stats');

		if (version_compare(PHP_VERSION, '5.3.6') >= 0)
			$arrBacktrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
		else
			$arrBacktrace = debug_backtrace();
		$strFile = $arrBacktrace[0]['file'];
		$intLine = $arrBacktrace[0]['line'];
		$strFile = str_replace(APPPATH, 'APPPATH'.DIRECTORY_SEPARATOR, $strFile);
		$strFile = str_replace(DOCROOT, 'DOCROOT'.DIRECTORY_SEPARATOR, $strFile);
		if ( ! $boolPlainText)
		{
			header('Content-Type: text/html; charset=utf-8');
			echo '<html><head><title>DEBUG</title>';
			echo "<style>.backtrace ul span { display:none }\n</style>";			
			echo '<link media="print" rel="stylesheet" href="/media/css/shared/debug.css" type="text/css">';			
			echo '<script type="text/javascript" src="/media/js/libs/jquery.js" charset="UTF-8"></script>';
			echo '<script type="text/javascript" src="/media/js/shared/debug.js" charset="UTF-8"></script>';
			echo '</head><body style="font-family:arial,helvetica,sans-serif,tahoma; font-size:13px">';
			echo '<table width="100%" style="border:1px solid #E5EFF8" cellpadding="8" cellspacing="0">';
			echo '<tr><td bgcolor="#666666" style="color:white; font-size:14px; font-weight:bold">';

		}
		echo $strFile, ': ', $intLine;
		if ( ! $boolPlainText)
			echo '</td></tr>';
		echo "\n\n";
		$strSource = Debug::source($arrBacktrace[0]['file'], $intLine, 0);
		$intBegin = strpos($strSource, 'Debug::x(') + 9;
		$intEnd = strpos($strSource, ');');
		if ($intBegin AND $intEnd AND $intEnd > $intBegin) {
			$strVars = substr($strSource, $intBegin, $intEnd - $intBegin);
			$arrVars = preg_split('![, ]+!', $strVars);
		}
		$strCor = '';
		$arrParams = func_get_args();
		foreach ($arrParams as $intKey => $strVar)
		{
			$strParam = isset($arrVars[$intKey])? '<strong style="font-family:arial">'.$arrVars[$intKey].'</strong>: ' : '';
			if ( ! $boolPlainText)
			{
				$strCor = ($strCor == '#eeeeee')? '#ffffff' : '#eeeeee';
				echo '<tr><td bgcolor="', $strCor, '" style="color:black; font-size:12px;">';
				echo '<pre style="white-space:pre-wrap">';
			} else
				$strParam = strip_tags($strParam);
			if (is_array($strVar) OR is_object($strVar))
				echo $strParam, print_r($strVar, TRUE);
			else
				echo $strParam, strip_tags(Debug::vars($strVar));
			if ( ! $boolPlainText)
				echo '</pre></td></tr>';
			echo "\n";
		}
		if ( ! $boolPlainText)
		{
			echo '</table>';
			if ($strProfiler) {
				$strBacktrace = '<table class="kp-table"><tr class="kp-title" style="background-color: #E5E5DD"><td class="kp-name">BACKTRACE</td></tr>';
				$strBacktrace .= '<tr><td><div id="framework_error" style="padding:6px 0px 5px 0px">'.self::backtrace($arrBacktrace).'</div></td></tr>';
				$strBacktrace .= '</table>';
				echo $strBacktrace;
				// $strProfiler = str_replace('<div id="kohana-profiler" style="display:none;">', '<div id="kohana-profiler" style="display:none;">'.$strBacktrace, $strProfiler);
				echo $strProfiler;
			}
			echo '<br /></body></html>';
		}
		exit;
	}
	
	/**
	 * Displays nice backtrace information.
	 *
	 * @param array $arrTrace Backtrace generated by an exception or debug_backtrace
	 * @return string
	 */
	public static function backtrace(array $arrTrace)
	{
		if ( ! is_array($arrTrace))
			return '';

		// Final output
		$strTemp = '<ul class="backtrace">';
		$strDocRoot = str_replace('\\', '/', DOCROOT);

		foreach ($arrTrace as $intKey => $mixEntry)
		{
			$strTemp .= '<li>';

			if (isset($mixEntry['file']))
			{
				// $strTemp .= Kohana::lang('core.error_file_line', preg_replace('!^'.preg_quote($strDocRoot).'!', '', str_replace('\\', '/', $mixEntry['file'])), $mixEntry['line']);
				$strTemp .= $mixEntry['file'];
				$strTemp .= '<span style="font-size:12px; color:navy;">';
				if (isset($mixEntry['class']))
					$strTemp .= ' '.$mixEntry['class'].$mixEntry['type'];
				$strTemp .= $mixEntry['function'].'( ';
				if (isset($mixEntry['args']) AND is_array($mixEntry['args'])) {
					$strSep = '';
					for ($intLoop = 0; $intLoop < count($mixEntry['args']); $intLoop++) {
						$mixArg = $mixEntry['args'][$intLoop];
						if (is_object($mixArg))
							$mixArg = get_class($mixArg);
						elseif (is_array($mixArg))
							$mixArg = 'array';
						elseif (is_string($mixArg)) {
							$mixArg = preg_replace('!^'.preg_quote($strDocRoot).'!', '', str_replace('\\', '/', $mixArg));
							$mixArg = '<strong>"</strong>'.trim($mixArg).'<strong>"</strong>';
						}
						$strTemp .= $strSep.$mixArg;
						$strSep = ', ';
					}
				}
				$strTemp .= ' )</span>';
			}

			$strTemp .= '<pre>';

			if (isset($mixEntry['class']))
			{
				// Add class and call type
				$strTemp .= $mixEntry['class'].$mixEntry['type'];
			}

			// Add function
			$strTemp .= $mixEntry['function'].'( ';

			// Add function args
			if (isset($mixEntry['args']) AND is_array($mixEntry['args']))
			{
				// Separator starts as nothing
				$strSep = '';

				while ($mixArg = array_shift($mixEntry['args']))
				{
					if (is_string($mixArg) AND is_file($mixArg))
					{
						// Remove docroot from filename
						$mixArg = preg_replace('!^'.preg_quote($strDocRoot).'!', '', str_replace('\\', '/', $mixArg));
					}
					elseif (is_object($mixArg) AND preg_match('!_Controller$!i', get_class($mixArg)))
					{
						$strTemp .= $strSep.HTML::entities(var_export($mixArg, TRUE));
					}
					else
					{
						$strTemp .= $strSep.HTML::entities(print_r($mixArg, TRUE));
					}

					// Change separator to a comma
					$strSep = ', ';
				}
			}

			$strTemp .= ' )</pre></li>';

		}

		return $strTemp.'</ul>';
	}
	
}